@namespace UIComponents.DropDownMenu

<li class="menu-item" @onmouseover="OnMouseEnter" @onmouseout="OnMouseLeave">
    <CascadingValue Value="this" Name="MenuItem">

        <div class="menu-item-label @(IsOpen ? "menu-item-active" : "")">
            @Text
            @if (hasChildren)
            {
                <i class="oi-menu-icon oi oi-chevron-right"></i>
            }
        </div>
        <div class="@(IsOpen ? "" : "hidden")">@ChildContent</div>
    </CascadingValue>
</li>

@code {
    [Parameter]
    public required String Text { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [CascadingParameter(Name = "MenuItems")]
    public MenuItems MenuItems { get; set; }

    private bool hasChildren = false;

    private bool IsOpen { get; set; }

    private System.Timers.Timer? closeTimer;

    public void OnMouseEnter()
    {
        // Cancel any pending close action
        closeTimer?.Stop();
        closeTimer = null;
        IsOpen = true;
        StateHasChanged();
    }

    public void OnMouseLeave()
    {
        // Delay closing slightly to allow moving between menu and submenu
        closeTimer = new System.Timers.Timer(150);
        closeTimer.Elapsed += (s, e) =>
        {
            closeTimer?.Stop();
            closeTimer = null;
            IsOpen = false;
            InvokeAsync(StateHasChanged);
        };
        closeTimer.AutoReset = false;
        closeTimer.Start();
    }

    public void RegisterChildMenu()
    {
        hasChildren = true;
        StateHasChanged();
    }

}